public class constraintBench.test.interProcedural.InterMultiple1 extends java.lang.Object
{

    public void <init>()
    {
        constraintBench.test.interProcedural.InterMultiple1 this;

        this := @this: constraintBench.test.interProcedural.InterMultiple1;

        specialinvoke this.<java.lang.Object: void <init>()>();
/*9*/

        return;
/*9*/
    }

    public void test()
    {
        constraintBench.test.interProcedural.InterMultiple1 this;
        boolean a, $z0, $z1, $z2, flag;
        byte flag#3;
        java.io.PrintStream $r0;

        this := @this: constraintBench.test.interProcedural.InterMultiple1;
/*
 *		-1.
true
*/

        $z0 = specialinvoke this.<constraintBench.test.interProcedural.InterMultiple1: boolean callee()>();
/*
 *		12.
true
*/

        if $z0 == 0 goto label1;
/*
 *		12.
true
*/

        $z2 = 0;
/*
 *		20.
(not C1001)
*/

        goto label2;
/*
 *		20.
(not C1001)
*/

     label1:
        $z2 = 1;
/*
 *		20.
C1001
*/

     label2:
        a = $z2;
/*
 *		12.
true
*/

        flag = 0;
/*
 *		13.
true
*/

        if a == 0 goto label3;
/*
 *		14.
true
*/

        $z1 = staticinvoke <constraintBench.utils.Configuration: boolean featureB()>();
/*
 *		20.
C1001
*/

        if $z1 == 0 goto label3;
/*
 *		20.
C1001
*/

        flag#3 = 3;
/*
 *		15.
(and C1001 C1002)
*/

        goto label4;
/*
 *		16.
(and C1001 C1002)
*/

     label3:
        flag#3 = 4;
/*
 *		17.
(or (not C1001) (and C1001 (not C1002)))
*/

     label4:
        $r0 = <java.lang.System: java.io.PrintStream out>;
/*
 *		19.
true
*/

        virtualinvoke $r0.<java.io.PrintStream: void println(int)>(flag#3);
/*
 *		19.
true
*/

        return;
/*
 *		20.
true
*/
    }

    private boolean callee()
    {
        constraintBench.test.interProcedural.InterMultiple1 this;
        boolean $z0;

        this := @this: constraintBench.test.interProcedural.InterMultiple1;
/*
 *		-1.
true
*/

        $z0 = staticinvoke <constraintBench.utils.Configuration: boolean featureA()>();
/*
 *		23.
true
*/

        if $z0 == 0 goto label1;
/*
 *		23.
true
*/

        return 0;
/*
 *		24.
C1001
*/

     label1:
        return 1;
/*
 *		26.
(not C1001)
*/
    }
}
