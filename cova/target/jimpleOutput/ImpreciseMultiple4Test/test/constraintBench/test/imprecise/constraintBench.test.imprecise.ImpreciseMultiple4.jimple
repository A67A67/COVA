public class constraintBench.test.imprecise.ImpreciseMultiple4 extends java.lang.Object
{

    public void <init>()
    {
        constraintBench.test.imprecise.ImpreciseMultiple4 this;

        this := @this: constraintBench.test.imprecise.ImpreciseMultiple4;

        specialinvoke this.<java.lang.Object: void <init>()>();
/*9*/

        return;
/*9*/
    }

    public void test()
    {
        constraintBench.test.imprecise.ImpreciseMultiple4 this;
        int d, a, b, c;
        java.lang.String $r0, $r1;
        java.io.PrintStream $r2;

        this := @this: constraintBench.test.imprecise.ImpreciseMultiple4;
/*
 *		-1.
true
*/

        d = staticinvoke <constraintBench.utils.Configuration: int featureD()>();
/*
 *		12.
true
*/

        if d <= 8 goto label1;
/*
 *		13.
true
*/

        $r0 = <constraintBench.utils.Configuration: java.lang.String fieldA>;
/*
 *		14.
(not (<= C1004 8))
*/

        a = virtualinvoke $r0.<java.lang.String: int length()>();
/*
 *		14.
(not (<= C1004 8))
*/

        $r1 = <constraintBench.utils.Configuration: java.lang.String fieldB>;
/*
 *		15.
(not (<= C1004 8))
*/

        b = virtualinvoke $r1.<java.lang.String: int length()>();
/*
 *		15.
(not (<= C1004 8))
*/

        c = a + b;
/*
 *		16.
(not (<= C1004 8))
*/

        if c <= 0 goto label1;
/*
 *		17.
(not (<= C1004 8))
*/

        $r2 = <java.lang.System: java.io.PrintStream out>;
/*
 *		18.
(and (not (<= C1004 8)) (not im(C1007+C1008)_0))
*/

        virtualinvoke $r2.<java.io.PrintStream: void println()>();
/*
 *		18.
(and (not (<= C1004 8)) (not im(C1007+C1008)_0))
*/

     label1:
        return;
/*
 *		21.
true
*/
    }
}
