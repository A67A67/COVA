public class constraintBench.test.indirect.IndirectConcrete1 extends java.lang.Object
{

    public void <init>()
    {
        constraintBench.test.indirect.IndirectConcrete1 this;

        this := @this: constraintBench.test.indirect.IndirectConcrete1;

        specialinvoke this.<java.lang.Object: void <init>()>();
/*9*/

        return;
/*9*/
    }

    public void test()
    {
        constraintBench.test.indirect.IndirectConcrete1 this;
        int d, e#3;
        java.io.PrintStream $r0;
        byte a;
        boolean e;

        this := @this: constraintBench.test.indirect.IndirectConcrete1;
/*
 *		-1.
true
*/

        d = staticinvoke <constraintBench.utils.Configuration: int featureD()>();
/*
 *		12.
true
*/

        a = 0;
/*
 *		13.
true
*/

        if d != 2 goto label1;
/*
 *		14.
true
*/

        a = 1;
/*
 *		15.
(= C1004 2)
*/

     label1:
        if d != 3 goto label2;
/*
 *		17.
true
*/

        a = 2;
/*
 *		18.
(= C1004 3)
*/

     label2:
        e = 0;
/*
 *		20.
true
*/

        if a < 0 goto label3;
/*
 *		21.
true
*/

        e#3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>("1");
/*
 *		22.
(or (= C1004 3) (= C1004 2))
*/

        goto label4;
/*
 *		23.
(or (= C1004 3) (= C1004 2))
*/

     label3:
        e#3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>("2");
/*
 *		24.
(and (not (= C1004 3)) (not (= C1004 2)))
*/

     label4:
        if a >= 2 goto label5;
/*
 *		26.
true
*/

        e#3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>("3");
/*
 *		27.
(= C1004 2)
*/

     label5:
        $r0 = <java.lang.System: java.io.PrintStream out>;
/*
 *		29.
(or (= C1004 3) (= C1004 2))
*/

        virtualinvoke $r0.<java.io.PrintStream: void print(int)>(e#3);
/*
 *		29.
(or (= C1004 3) (= C1004 2))
*/

        return;
/*
 *		30.
(or (= C1004 3) (= C1004 2))
*/
    }
}
