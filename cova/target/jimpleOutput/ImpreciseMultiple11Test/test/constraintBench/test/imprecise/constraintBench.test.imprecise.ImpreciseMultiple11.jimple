public class constraintBench.test.imprecise.ImpreciseMultiple11 extends java.lang.Object
{

    public void <init>()
    {
        constraintBench.test.imprecise.ImpreciseMultiple11 this;

        this := @this: constraintBench.test.imprecise.ImpreciseMultiple11;

        specialinvoke this.<java.lang.Object: void <init>()>();
/*9*/

        return;
/*9*/
    }

    public void test()
    {
        constraintBench.test.imprecise.ImpreciseMultiple11 this;
        java.lang.String fa, fc, $r0;
        boolean $z0, a;
        java.io.PrintStream $r1;

        this := @this: constraintBench.test.imprecise.ImpreciseMultiple11;
/*
 *		-1.
true
*/

        fa = <constraintBench.utils.Configuration: java.lang.String fieldA>;
/*
 *		12.
true
*/

        a = virtualinvoke fa.<java.lang.String: boolean startsWith(java.lang.String)>("a");
/*
 *		13.
true
*/

        fc = <constraintBench.utils.Configuration: java.lang.String fieldC>;
/*
 *		14.
true
*/

        $r0 = <constraintBench.utils.Configuration: java.lang.String fieldB>;
/*
 *		15.
true
*/

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("b");
/*
 *		15.
true
*/

        if $z0 == 0 goto label1;
/*
 *		15.
true
*/

        a = virtualinvoke fc.<java.lang.String: boolean equals(java.lang.Object)>("c");
/*
 *		16.
im(C1008)_0
*/

     label1:
        if a == 0 goto label2;
/*
 *		18.
true
*/

        $r1 = <java.lang.System: java.io.PrintStream out>;
/*
 *		19.
(or (and im(C1008)_0 im(C1009)_0) (and (not im(C1008)_0) im(C1007)_0))
*/

        virtualinvoke $r1.<java.io.PrintStream: void println()>();
/*
 *		19.
(or (and im(C1008)_0 im(C1009)_0) (and (not im(C1008)_0) im(C1007)_0))
*/

     label2:
        return;
/*
 *		21.
true
*/
    }
}
